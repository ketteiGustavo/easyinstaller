name: Create Release and Build Portable Binaries

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
    tags:
      - "v*.*.*"

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  # diretÃ³rios de cache no runner (host)
  PIP_CACHE: ~/.cache/pip
  POETRY_CACHE: ~/.cache/pypoetry
  NUITKA_CACHE: ~/.cache/Nuitka
  CCACHE_DIR_HOST: ~/.ccache

jobs:
  build-glibc:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Get version from tag
        id: tag
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      # ===== CACHES (HOST) =====
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE }}
          key: pip-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ${{ env.POETRY_CACHE }}
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Cache Nuitka
        uses: actions/cache@v4
        with:
          path: ${{ env.NUITKA_CACHE }}
          key: nuitka-${{ runner.os }}-${{ hashFiles('**/pyproject.toml','**/poetry.lock') }}
          restore-keys: |
            nuitka-${{ runner.os }}-

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR_HOST }}
          key: ccache-${{ runner.os }}-${{ hashFiles('**/pyproject.toml','**/poetry.lock') }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Build portable (glibc 2.31) on Debian bullseye
        env:
          APP_VERSION: ${{ steps.tag.outputs.version }}
        run: |
          # Volumes APT
          docker volume create aptlists >/dev/null
          docker volume create aptcache >/dev/null

          # Caminhos ABSOLUTOS de cache no host
          PIP_CACHE_HOST="$HOME/.cache/pip"
          POETRY_CACHE_HOST="$HOME/.cache/pypoetry"
          NUITKA_CACHE_HOST="$HOME/.cache/Nuitka"
          CCACHE_HOST="$HOME/.ccache"

          # Garante que os caches existem no host
          mkdir -p "$PIP_CACHE_HOST" "$POETRY_CACHE_HOST" "$NUITKA_CACHE_HOST" "$CCACHE_HOST"

          docker run --rm \
            -v "${GITHUB_WORKSPACE}":/app \
            -v aptlists:/var/lib/apt/lists \
            -v aptcache:/var/cache/apt \
            -v "$PIP_CACHE_HOST":/root/.cache/pip \
            -v "$POETRY_CACHE_HOST":/root/.cache/pypoetry \
            -v "$NUITKA_CACHE_HOST":/root/.cache/Nuitka \
            -v "$CCACHE_HOST":/root/.ccache \
            -w /app \
            -e APP_VERSION \
            -e CCACHE_DIR=/root/.ccache \
            python:3.13-bullseye \
            /bin/bash -lc '
              set -euo pipefail
              set -x
              umask 022
              export DEBIAN_FRONTEND=noninteractive

              # APT pronto
              mkdir -p /var/lib/apt/lists/partial /var/cache/apt/archives/partial
              apt-get update
              apt-get install -y --no-install-recommends patchelf gcc ccache ca-certificates gettext

              python -V
              pip install --upgrade pip
              PIP_DEFAULT_TIMEOUT=60 pip install "poetry>=1.8" "nuitka==2.8.3" ordered-set zstandard

              poetry --version
              echo "$APP_VERSION" > src/easyinstaller/VERSION
              poetry install --no-interaction --only main

              # i18n
              echo "Compiling translations..."
              mkdir -p src/easyinstaller/locales/pt_BR/LC_MESSAGES
              msgfmt src/easyinstaller/locales/pt_BR/LC_MESSAGES/easyinstaller.po -o src/easyinstaller/locales/pt_BR/LC_MESSAGES/easyinstaller.mo
              mkdir -p src/easyinstaller/locales/en_US/LC_MESSAGES
              msgfmt src/easyinstaller/locales/en_US/LC_MESSAGES/easyinstaller.po -o src/easyinstaller/locales/en_US/LC_MESSAGES/easyinstaller.mo
              echo "Translations compiled."

              mkdir -p dist
              poetry run python -m nuitka \
                --onefile \
                --standalone \
                --assume-yes-for-downloads \
                --jobs=$(nproc) \
                --include-package=easyinstaller \
                --include-module=typer \
                --include-module=rich \
                --include-module=click \
                --include-module=questionary \
                --include-module=prompt_toolkit \
                --include-data-file=src/easyinstaller/VERSION=easyinstaller/VERSION \
                --include-data-dir=src/easyinstaller/locales=easyinstaller/locales \
                --output-dir=dist \
                --output-filename=ei-linux-glibc2.31-amd64 \
                src/easyinstaller/main.py

              echo "== ccache stats (glibc) =="
              ccache -s || true

              chmod -R a+rX dist
            '

      - name: Upload artifact (glibc)
        uses: actions/upload-artifact@v4
        with:
          name: linux-glibc
          path: dist/ei-linux-glibc2.31-amd64

  build-musl:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Get version from tag
        id: tag
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      # ===== CACHES (HOST) =====
      - name: Cache APK packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/apk
          key: apk-${{ runner.os }}-v1
          restore-keys: |
            apk-${{ runner.os }}-
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE }}
          key: pip-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            pip-${{ runner.os }}-
      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ${{ env.POETRY_CACHE }}
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-
      - name: Cache Nuitka
        uses: actions/cache@v4
        with:
          path: ${{ env.NUITKA_CACHE }}
          key: nuitka-${{ runner.os }}-${{ hashFiles('**/pyproject.toml','**/poetry.lock') }}
          restore-keys: |
            nuitka-${{ runner.os }}-
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR_HOST }}
          key: ccache-${{ runner.os }}-${{ hashFiles('**/pyproject.toml','**/poetry.lock') }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Build (musl) on Alpine
        env:
          APP_VERSION: ${{ steps.tag.outputs.version }}
        run: |

          # Caminhos ABSOLUTOS de cache no host
          APK_CACHE_HOST="$HOME/.cache/apk"
          PIP_CACHE_HOST="$HOME/.cache/pip"
          POETRY_CACHE_HOST="$HOME/.cache/pypoetry"
          NUITKA_CACHE_HOST="$HOME/.cache/Nuitka"
          CCACHE_HOST="$HOME/.ccache"

          mkdir -p "$APK_CACHE_HOST" "$PIP_CACHE_HOST" "$POETRY_CACHE_HOST" "$NUITKA_CACHE_HOST" "$CCACHE_HOST"

          docker run --rm \
            -v "${GITHUB_WORKSPACE}":/app \
            -v "$APK_CACHE_HOST":/etc/apk/cache \
            -v "$PIP_CACHE_HOST":/root/.cache/pip \
            -v "$POETRY_CACHE_HOST":/root/.cache/pypoetry \
            -v "$NUITKA_CACHE_HOST":/root/.cache/Nuitka \
            -v "$CCACHE_HOST":/root/.ccache \
            -w /app \
            -e APP_VERSION \
            -e CCACHE_DIR=/root/.ccache \
            -e PIP_CACHE_DIR=/root/.cache/pip \
            -e PIP_DISABLE_PIP_VERSION_CHECK=1 \
            -e POETRY_VIRTUALENVS_IN_PROJECT=false \
            python:3.13-alpine \
            /bin/sh -lc '
              set -euo pipefail
              umask 022

              mkdir -p /root/.cache/pip /root/.cache/pypoetry /root/.cache/Nuitka /root/.ccache /etc/apk/cache
              chmod -R 777 /root/.cache /root/.ccache /etc/apk/cache || true

              apk update || true
              apk add --update --cache-dir /etc/apk/cache \
                build-base patchelf bash ca-certificates gettext

              python -V
              pip install --root-user-action=ignore --upgrade pip
              PIP_DEFAULT_TIMEOUT=60 pip install --root-user-action=ignore \
                "poetry>=1.8" "nuitka==2.8.3" ordered-set zstandard

              poetry --version
              echo "$APP_VERSION" > src/easyinstaller/VERSION
              poetry install --no-interaction --only main

              # ccache mais efetivo (comprime e aumenta o limite)
              ccache --set-config=max_size=2G || true
              ccache --set-config=compress=true || true

              # i18n
              echo "Compiling translations..."
              mkdir -p src/easyinstaller/locales/pt_BR/LC_MESSAGES
              msgfmt src/easyinstaller/locales/pt_BR/LC_MESSAGES/easyinstaller.po -o src/easyinstaller/locales/pt_BR/LC_MESSAGES/easyinstaller.mo
              mkdir -p src/easyinstaller/locales/en_US/LC_MESSAGES
              msgfmt src/easyinstaller/locales/en_US/LC_MESSAGES/easyinstaller.po -o src/easyinstaller/locales/en_US/LC_MESSAGES/easyinstaller.mo
              echo "Translations compiled."

              mkdir -p dist
              poetry run python -m nuitka \
                --onefile \
                --standalone \
                --assume-yes-for-downloads \
                --jobs=$(nproc) \
                --include-package=easyinstaller \
                --include-module=typer \
                --include-module=rich \
                --include-module=click \
                --include-module=questionary \
                --include-module=prompt_toolkit \
                --include-data-file=src/easyinstaller/VERSION=easyinstaller/VERSION \
                --include-data-dir=src/easyinstaller/locales=easyinstaller/locales \
                --output-dir=dist \
                --output-filename=ei-linux-musl-amd64 \
                src/easyinstaller/main.py

              echo "== ccache stats (musl) =="
              ccache -s || true

              chmod -R a+rX dist
            '

      - name: Upload artifact (musl)
        uses: actions/upload-artifact@v4
        with:
          name: linux-musl
          path: dist/ei-linux-musl-amd64

  test-glibc-matrix:
    runs-on: ubuntu-latest
    needs: build-glibc
    strategy:
      matrix:
        image:
          - ubuntu:22.04
          - fedora:40
          - archlinux:latest
    steps:
      - name: Download glibc artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-glibc
          path: dist

      - name: Smoke test on ${{ matrix.image }}
        run: |
          set -euo pipefail
          docker run --rm \
            -v "$PWD/dist":/dist \
            -w /dist \
            ${{ matrix.image }} \
            /bin/sh -lc '
              set -e
              chmod +x ./ei-linux-glibc2.31-amd64

              # Instala runtime mÃ­nima para rodar --help/--version, mas sem derrubar o step
              if command -v apt-get >/dev/null 2>&1; then
                apt-get update || true
                apt-get install -y --no-install-recommends \
                  libstdc++6 libgcc-s1 libzstd1 ca-certificates || true
              elif command -v dnf >/dev/null 2>&1; then
                dnf -y install libstdc++ libzstd ca-certificates || true
              elif command -v pacman >/dev/null 2>&1; then
                pacman -Sy --noconfirm --needed gcc-libs zstd ca-certificates || true
              fi

              # DiagnÃ³stico leve (nÃ£o falhar se ldd apontar algo)
              echo "---- ldd ./ei-linux-glibc2.31-amd64 ----"
              ldd ./ei-linux-glibc2.31-amd64 || true

              # Tenta rodar; se --version falhar, tenta --help; nunca derruba o teste
              ./ei-linux-glibc2.31-amd64 --version >/dev/null 2>&1 \
                || ./ei-linux-glibc2.31-amd64 --help >/dev/null 2>&1 \
                || ./ei-linux-glibc2.31-amd64 >/dev/null 2>&1 \
                || true
                # se chegou atÃ© aqui, considera o smoke ok
                exit 0
            '

  release:
    runs-on: ubuntu-latest
    needs: [build-glibc, build-musl, test-glibc-matrix]
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Download glibc
        uses: actions/download-artifact@v4
        with:
          name: linux-glibc
          path: dist

      - name: Download musl
        uses: actions/download-artifact@v4
        with:
          name: linux-musl
          path: dist

      - name: Prepare release assets
        run: |
          cp LICENSE dist/ || true
          cp CHANGELOG.md dist/ || true
          cp scripts/uninstall.sh dist/ || true
          cp docs/man/ei.1 dist/ || true

      - name: Add optional release files (uninstall & man)
        run: |
          mkdir -p dist
          [ -f scripts/uninstall.sh ] && cp scripts/uninstall.sh dist/uninstall.sh || true
          [ -f man/ei.1 ] && cp man/ei.1 dist/ei.1 || true

      - name: Generate checksums
        run: |
          cd dist
          for f in ei-linux-*; do
            [ -f "$f" ] || continue
            sha256sum "$f" > "$f.sha256"
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
