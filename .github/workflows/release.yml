name: Create Release and Build Portable Binaries

on:
  workflow_dispatch: {}
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-glibc:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Get version from tag
        id: tag
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build portable (glibc 2.31) on Debian bullseye
        run: |
          docker run --rm \
            -v "${GITHUB_WORKSPACE}":/app \
            -w /app \
            python:3.13-bullseye \
            /bin/bash -lc '
              set -euo pipefail
              set -x
              umask 022
              export DEBIAN_FRONTEND=noninteractive

              echo "=== /etc/os-release ==="; cat /etc/os-release || true
              echo "=== /etc/apt/sources.list ==="; cat /etc/apt/sources.list || true

              apt_retry() {
                for i in 1 2 3 4 5; do
                  echo "APT attempt $i/5: $*"
                  if apt-get -o Acquire::Retries=5 -o DPkg::Lock::Timeout=60 "$@"; then
                    return 0
                  fi
                  sleep $((i*2))
                done
                return 1
              }

              apt_retry update || { echo "APT UPDATE falhou"; cat /var/log/apt/term.log 2>/dev/null || true; exit 100; }
              apt_retry install -y --no-install-recommends patchelf gcc ccache ca-certificates || { echo "APT INSTALL falhou"; cat /var/log/apt/term.log 2>/dev/null || true; exit 100; }

              python -V
              pip install --upgrade pip
              PIP_DEFAULT_TIMEOUT=60 pip install "poetry>=1.8" "nuitka==2.8.3" ordered-set zstandard

              poetry --version
              poetry install --no-interaction --no-root --only main

              mkdir -p dist
              poetry run python -m nuitka \
                --onefile \
                --standalone \
                --assume-yes-for-downloads \
                --jobs=$(nproc) \
                --include-module=typer \
                --include-module=rich \
                --include-module=click \
                --include-module=questionary \
                --include-module=prompt_toolkit \
                --output-dir=dist \
                --output-filename=ei-linux-glibc2.31-amd64 \
                src/easyinstaller/main.py

              # Garantir leitura e travessia de diretórios para o runner
              chmod -R a+rX dist
            '

      - name: Upload artifact (glibc)
        uses: actions/upload-artifact@v4
        with:
          name: linux-glibc
          path: dist/*

  build-musl:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Build (musl) on Alpine
        run: |
          docker run --rm \
            -v "${GITHUB_WORKSPACE}":/app \
            -w /app \
            python:3.13-alpine \
            /bin/sh -lc '
              set -euo pipefail
              set -x

              echo "=== /etc/os-release ==="; cat /etc/os-release || true

              apk_retry() {
                for i in 1 2 3 4 5; do
                  echo "APK attempt $i/5: $*"
                  if apk add --no-cache "$@"; then
                    return 0
                  fi
                  sleep $((i*2))
                done
                return 1
              }

              apk update || true
              apk_retry build-base patchelf bash ca-certificates

              python -V
              pip install --upgrade pip
              PIP_DEFAULT_TIMEOUT=60 pip install "poetry>=1.8" "nuitka==2.8.3" ordered-set zstandard

              poetry --version
              poetry install --no-interaction --no-root --only main

              mkdir -p dist
              poetry run python -m nuitka \
                --onefile \
                --standalone \
                --static-libpython=yes \
                --assume-yes-for-downloads \
                --jobs=$(nproc) \
                --include-module=typer \
                --include-module=rich \
                --include-module=click \
                --include-module=questionary \
                --include-module=prompt_toolkit \
                --output-dir=dist \
                --output-filename=ei-linux-musl-amd64 \
                src/easyinstaller/main.py

              chmod -R a+rX dist
            '

      - name: Upload artifact (musl)
        uses: actions/upload-artifact@v4
        with:
          name: linux-musl
          path: dist/*

  test-glibc-matrix:
    runs-on: ubuntu-latest
    needs: build-glibc
    strategy:
      matrix:
        image:
          - ubuntu:22.04
          - fedora:40
          - archlinux:latest
    steps:
      - name: Download glibc artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-glibc
          path: dist

      - name: Smoke test on ${{ matrix.image }}
        run: |
          set -euo pipefail
          docker run --rm \
            -v "$PWD/dist":/dist \
            -w /dist \
            ${{ matrix.image }} \
            /bin/sh -lc '
              set -e
              chmod +x ./ei-linux-glibc2.31-amd64

              # Instala runtime mínima para rodar --help/--version
              if command -v apt-get >/dev/null 2>&1; then
                apt-get update && apt-get install -y --no-install-recommends libstdc++6 ca-certificates
              elif command -v dnf >/dev/null 2>&1; then
                dnf -y install libstdc++ ca-certificates || true
              elif command -v pacman >/dev/null 2>&1; then
                pacman -Sy --noconfirm gcc-libs ca-certificates || true
              fi

              ./ei-linux-glibc2.31-amd64 --help >/dev/null 2>&1 || ./ei-linux-glibc2.31-amd64 --version >/dev/null 2>&1
            '

  release:
    runs-on: ubuntu-latest
    needs: [build-glibc, build-musl, test-glibc-matrix]
    steps:
      - name: Download glibc
        uses: actions/download-artifact@v4
        with:
          name: linux-glibc
          path: dist

      - name: Download musl
        uses: actions/download-artifact@v4
        with:
          name: linux-musl
          path: dist

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*